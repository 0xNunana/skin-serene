interface MarkdownRendererProps {
  content: string;
}

// This is a very basic renderer. For full Markdown support,
// a library like react-markdown with remark-gfm would be better.
// However, this setup will leverage @tailwindcss/typography for styling.
function basicMarkdownToHtml(markdown: string): string {
  let html = markdown;
  // Headers
  html = html.replace(
    /^### (.*$)/gim,
    '<h3 class="text-xl font-headline mt-4 mb-2">$1</h3>'
  );
  html = html.replace(
    /^## (.*$)/gim,
    '<h2 class="text-2xl font-headline mt-6 mb-3">$1</h2>'
  );
  html = html.replace(
    /^# (.*$)/gim,
    '<h1 class="text-3xl font-headline mt-8 mb-4">$1</h1>'
  );

  // Bold
  html = html.replace(/\*\*(.*?)\*\*/gim, "<strong>$1</strong>");
  html = html.replace(/__(.*?)__/gim, "<strong>$1</strong>");

  // Italic
  html = html.replace(/\*(.*?)\*/gim, "<em>$1</em>");
  html = html.replace(/_(.*?)_/gim, "<em>$1</em>");

  // Unordered lists
  html = html.replace(/^\* (.*$)/gim, "<li>$1</li>");
  html = html.replace(/^\- (.*$)/gim, "<li>$1</li>");
  // Wrap <li>s in <ul>. This is a simplification and might not handle nested lists or mixed content well.
  html = html.replace(/(<li>.*<\/li>)+/gis, "<ul>$&</ul>");

  // Paragraphs (any line not starting with a list or header becomes a paragraph)
  // This is tricky without a proper parser. For simplicity, we'll wrap lines in <p> if they aren't already part of another element.
  // A better approach would be splitting by \n\n and wrapping.
  // The @tailwindcss/typography plugin often expects raw HTML elements generated by a proper markdown parser.
  // This basic conversion might not fully utilize the plugin.
  // Let's try a simpler approach of splitting by newlines and wrapping non-empty lines.

  // The content might already have HTML like structures from simple replacements above.
  // A full markdown parser (like 'marked' or 'react-markdown') is recommended for production.
  // For now, we assume the content is somewhat pre-formatted or simple.
  // To better work with @tailwindcss/typography, the generated HTML needs to be clean.

  // A more robust but still basic approach for paragraphs:
  html = html
    .split(/\n\s*\n/)
    .map((paragraph) => {
      if (paragraph.startsWith("<h") || paragraph.startsWith("<ul")) {
        return paragraph; // Already handled
      }
      if (paragraph.trim() === "") return "";
      return `<p>${paragraph.trim().replace(/\n/g, "<br/>")}</p>`; // Replace single newlines within paragraphs with <br>
    })
    .join("");

  return html;
}

export default function MarkdownRenderer({ content }: MarkdownRendererProps) {
  const htmlContent = basicMarkdownToHtml(content);

  return (
    <div
      className="prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none 
                 prose-headings:font-headline prose-headings:text-primary 
                 prose-p:text-foreground/80 prose-p:font-body
                 prose-strong:text-foreground
                 prose-em:text-foreground/90
                 prose-a:text-accent hover:prose-a:text-accent/80
                 prose-ul:list-disc prose-ul:ml-6 prose-li:text-foreground/80
                 prose-blockquote:border-l-accent prose-blockquote:text-muted-foreground"
      dangerouslySetInnerHTML={{ __html: htmlContent }}
    />
  );
}
